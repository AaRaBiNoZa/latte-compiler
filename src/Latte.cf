-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Block ;

separator nonempty TopDef "" ;

Arg. 	   Arg ::= Type Ident;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "boolean" ;

Void.      Type ::= "void" ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr5 ;

Not.       Expr5 ::= "!" Expr5 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

-- LValues ------------------------------------------------

Attr.       LValue ::= Expr6 "." Ident ;

ArrEl.      LValue ::= Expr6 "[" Expr "]" ;

Var.        LValue ::= Ident ;

ELValue.    Expr6 ::= LValue ;

Ass.        Stmt ::= LValue "=" Expr ";" ;

Incr.       Stmt ::= LValue "++"  ";" ;

Decr.       Stmt ::= LValue "--"  ";" ;

-- arrays ------------------------------------------------

Arr.       Type ::= Type "[]" ;

ECrtArr.   Expr6 ::= "new" Type "[" Expr "]" ;

ForEach.   Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;

-- Classes ------------------------------------------------
ESelfRef.       Expr6 ::= "self" ;

ENullRef.       Expr6 ::= "(" Ident ")null" ;

Class.          Type ::= Ident ;

ECrtClass.      Expr6 ::= "new" Type;

ClassDef.       TopDef ::= "class" Ident "extends" Ident CBlock ;

classDefNoExt.  TopDef ::= "class" Ident CBlock ;

define classDefNoExt i b = ClassDef i (Ident "Object")  b ;

CBlock.         CBlock ::= "{" [CStmt] "}" ;

separator       CStmt "" ;

CEmpty.         CStmt ::= ";" ;

CDecl.          CStmt ::= Type [CItem] ";" ;

CNoInit.        CItem ::= Ident ;     

CMethDef.       CStmt ::= Type Ident "(" [Arg] ")" Block ;

separator nonempty CItem "," ;

EMethApp.   Expr6 ::= Expr6 "." Ident "(" [Expr] ")" ;